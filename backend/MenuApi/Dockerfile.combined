# Multi-stage Dockerfile that combines OpenFGA (Go) and .NET Azure Functions
# This creates a single container that runs both services

# Stage 1: Build .NET application
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

COPY MenuApi.csproj .
RUN dotnet restore

COPY . .
RUN dotnet build -c Release -o /app/build
RUN dotnet publish -c Release -o /app/publish

# Stage 2: Final image with both OpenFGA and .NET Functions
FROM --platform=linux/amd64 mcr.microsoft.com/azure-functions/dotnet-isolated:4-dotnet-isolated8.0

# Install OpenFGA (Go binary)
RUN apt-get update && \
    apt-get install -y wget && \
    wget https://github.com/openfga/openfga/releases/download/v1.5.0/openfga_1.5.0_linux_amd64.tar.gz && \
    tar -xzf openfga_1.5.0_linux_amd64.tar.gz && \
    mv openfga /usr/local/bin/ && \
    chmod +x /usr/local/bin/openfga && \
    rm openfga_1.5.0_linux_amd64.tar.gz && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy .NET application
WORKDIR /home/site/wwwroot
COPY --from=build /app/publish .

# Copy OpenFGA configuration
COPY openfga-config /openfga-config

# Copy startup script
COPY start.sh /start.sh
RUN chmod +x /start.sh

# Environment variables
ENV AzureWebJobsScriptRoot=/home/site/wwwroot \
    AzureFunctionsJobHost__Logging__Console__IsEnabled=true \
    OPENFGA_API_URL=http://localhost:8080 \
    OPENFGA_DATASTORE_ENGINE=memory \
    OPENFGA_LOG_FORMAT=json

# Expose ports
EXPOSE 80 8080

# Use custom startup script to run both OpenFGA and Functions
ENTRYPOINT ["/start.sh"]
